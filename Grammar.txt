// Main branch
// @author Brandon Ehrmanntraut 
S : Opening A
A : F Closing
F : N F | Imports F | endfile | M F | FullParagraph2 F
M : Manestart X
X : Q ManeEnd
Q : GeneralLine Q | endMainfunc
EndMainFunc2 : endMainfunc
EndMainFunc : N EndMainFunc2
// A structure to store any general line
GeneralLine : n | decType Punc | asignNum FinishAsignNum | asignNum numTypePunc | asignNum VP | asignNum AllPrefix | FullIncrement Punc | FullAsignBool Punc | CompleteIfLine QQ | ToPrint Punc | BSP InnerCase | FullFor InnerFor | CallingPara Punc | CallingPara APunc
//
// opening the file
//
Opening : Begin PRP | ExtendBegin PRP
Begin : Beginfile Class
Beginfile : beginfile
Class : class
PRP : PR Punc
PR : Punc Report
Punc : punc
Report : report
N : n
ExtendBegin : Begin Interfaces
Interfaces : Interfacelisting Interface
Interfacelisting : interfacelisting
Interface : interface
//
// Imports
//
Imports : Bimport Punc
Bimport : Import Iname
Import : import
Iname : iName
//
// Closing
//
Closing : Punc FinalEnd
FinalEnd : Signee Punc
Signee : signee
//
// print statements - to be updated in milestone 3
//
Print : print
Tempstr : strLit | string | true | false | boolType | numType | charLit | charType | dubLit | Tempstr BackEnd | BeginOp Value | PV IV | NumType Inc | NumType Dec | StrType
ToPrint : Print Tempstr
Fullprint : ToPrint Punc
//
// Mane Method
// The spelling of mane this way is dictated in the FiM++ wiki, not my own interpretation
Mane : mane
ManeMethod : manemethod
ManeDec : Mane ManeMethod
Manestart : ManeDec Punc
ManeEnd : ManeMethod Punc
//
// Variable declaration
//
Declaration : decType Punc
decType : VarDec FullType
VarDec : varDec
Asign : asign
FullType : varType Type | varType asignDec | varType asignBool
// varType is a collection of terminal symbols, I don't like it but it should work
// this is all of the variable names, asigned to their types
varType : strType | boolType | numType | charType | strArrayType | numArrayType | boolArrayType
asignDec : Asign matchedLit | asignDec BackEnd | PrefixAsignment IV | Asign NumType
// Used for prefix things, made to make this happier
PrefixAsignment : Asign PV
//
asignBool : Asign BoolValue | Asign FullBoolStatement
Type : Bool | double | char | string | boolArray | strArray | numArray | ReturnsChar AnyParams | numType | boolType | charType | strType
matchedLit : Bool true | Bool false | Bool null | Double Null | Double DubLit | Char Null | Char CharLit | String StrLit | String Null
Null : null
Double : double
Char : char
String : string
bool : Bool
True : true
False : false
DubLit : dubLit
CharLit : charLit
StrLit : strLit
//
//
// Arithmatic operations
// 
//
// Infix operators
FullInfix : FullInfix BackEnd | BeginOp Value
BeginOp : Value Op
Value : numType | Double DubLit | NumType Inc | NumType Dec | dubLit | ReturnsNumType AnyParams
Op : addInfix | subInfix | multInfix | divInfix
BackEnd : Op Value
//
// Prefix operators
//
AllPrefix : FullPrefix Punc | FullPrefix BP
FullPrefix : PV IV
PV : Prefix Value
Prefix : addPrefix | subPrefix | multPrefix | divPrefix
IV : Infix Value
Infix : addInfix2 | subInfix2 | multInfix2 | divInfix2
BP : BackEnd Punc | BackEnd BP
//
// Asigning a double to be a new value
//
Fan : asignNum FinishAsignNum | asignNum numTypePunc | asignNum VP | asignNum AllPrefix
asignNum : NumType Asign
NumType : numType | ReturnsNum AnyParams
FinishAsignNum : FullInfix Punc
numTypePunc : numType punc | FullIncrement Punc
VP : Value Punc
//
// Increment and Decrement
//
Inc : increment
Dec : decrement
FullIncrement : NumType Inc | NumType Dec
IncrimentOnly : FullIncrement Punc
// 
// Boolean statements
//
Nb : Not BoolValue | bool True | bool False | bool Null | boolType | Not FullNumBool | BeginNumBool Value | BeginNumBool FullInfix | BeginNumBool FullPrefix
BeginBoolStatement : Nb And | Nb Or | Nb Equals
FullBoolStatement : BeginBoolStatement Nb | FullBoolStatement BoolBack | FullBeginXOR Nb
BoolBack : And Nb | Or Nb
BoolValue : bool True | bool False | bool Null | boolType | bool FullNumBool | BeginNumBool Value | boolType | ReturnsBool AnyParams | ReturnsBool AnyParams
And : and
Or : or
Not : not
BeginXOR : xor Nb
xor : XOR
FullBeginXOR : BeginXOR Or
//
// asigning a boolean
//
BoolType : boolType | ReturnsBool AnyParams
FullAsignBool : BoolType asignBool
AsignBoolLine : FullAsignBool Punc
//
// If statement
//
If : if
IfStatement : If BoolValue | If FullBoolStatement
CompleteIfLine : IfStatement Punc | IfStatement TP
QQ : EndConditional Punc | GeneralLine QQ | EP QQ
EndConditional : endConditional
Then : then
TP : Then Punc
Else : else
EP : Else Punc
// 
// Switch statements
//
Switch : switch
BeginSwitch : Switch NumType
BSP : BeginSwitch Punc
CasePunc : CaseClose Punc
CaseClose : caseClose
Case : case
caseStart : Case DubLit
FullCase : caseStart CasePunc | DefaultCase Punc
SwitchClose : switchClose
DefaultCase : defaultCase
InnerCase : SwitchClose Punc | GeneralLine InnerCase | FullCase InnerCase
//
// Comparisons
//
NumBools : equals | greaterThan | lessThan | notEqual | greaterThanOrEqual | lessThanOrEqual
BeginNumBool : Value NumBools | FullInfix NumBools | FullPrefix NumBools
FullNumBool : BeginNumBool Value | BeginNumBool FullInfix | BeginNumBool FullPrefix
//
// For loops
//
For : for
Setfor : subInfix2
SetMaxInFor : setMaxInFor
newVarType : Double NumType | Char CharType
forType : For newVarType
intFor : forType Setfor
NumSet : Value SetMaxInFor | CharLit SetMaxInFor | FullInfix SetMaxInFor | FullPrefix SetMaxInFor
numMax : NumSet Value | NumSet CharLit | NumSet FullInfix | NumSet FullPrefix
numFor : intFor numMax | FNumI NumArrayType | FBoolI BoolArrayType | FCharI CharArrayType | FStrI StrArrayType
FullFor : numFor Punc
CharType : charType | ReturnsChar AnyParams
InnerFor : GeneralLine InnerFor | SwitchClose Punc
//
// for each loops
//
newNumVar : Double NumType
newCharVar : Char CharType
newBoolVar : Bool BoolType
newStrType : String strType
FNum : For newNumVar
FChar : For newCharVar
FBool : For newBoolVar
FStr : For newStrVar
FNumI : FNum ForEach
FCharI : FChar ForEach
FBoolI : FBool ForEach
FStrI : FStr ForEach
NumArrayType : numArrayType | ReturnsNumArrayType AnyParams
CharArrayType : charArrayType | ReturnsCharArrayType AnyParams
StrArrayType : strArrayType | ReturnsStrArrayType AnyParams
BoolArrayType : boolArrayType | ReturnsBoolArrayType AnyParams
ForEach : forEach
//
// methods
// Begining with all of the terminal symbols
Param : param
ReturnType : returnType
Para : para
Return : return
Call : callPara
ReturnsNum : returnsNumType
ReturnsChar : returnsCharType
ReturnsBool : returnsBoolType
ReturnsStr : returnsStrType
ReturnsVoid : voidType
ReturnsNumArrayType : returnsNumArrayType
ReturnsCharArrayType : returnsCharArrayType
ReturnsBoolArrayType : returnsBoolArrayType
ReturnsStrArrayType : returnsStrArrayType
StrType : ReturnsStr AnyParams | strType
// return statements
Return : return
ReturningNum : Return NumType | Return FullInfix | Return FullIncrement | Return DubLit | Return Null | Return Value
ReturningChar : Return CharLit | Return CharType | Return Null
ReturningStr : Return StrLit | Return StrType | Return Null
ReturningBool : Return BoolType | Return True | Return False | Return Null
ReturningStrArr : Return StrArray | Return Null
ReturningNumArr : Return NumArray | Return Null
ReturningCharArr : Return CharArray | Return Null
ReturningBoolArr : Return BoolArray | Return Null
FullReturnNum : ReturningNum Punc
FullReturnChar : ReturningChar Punc
FullReturnBool : ReturningBool Punc
FullReturnStr : ReturningStr Punc
//
// Declarations
//
// Declaring start of method
Param : param
ReturnType : returnType
ParaNumArr : Para ReturnsNumArrayType
ParaCharArr : Para ReturnsCharArrayType
ParaBoolArr : Para ReturnsBoolArrayType
ParaStrArr : Para ReturnsStrArrayType
ParaChar : Para ReturnsChar
ParaBool : Para ReturnsBool
ParaStr : Para ReturnsStr
ParaVoid : Para ReturnsVoid
ParaNum : Para ReturnsNum
// Parameters
SameType : Double NumType | String StrType | Char CharType | Bool BoolType | NumArray NumArrayType | StrArray StrArrayType | CharArray CharArrayType | BoolArray BoolArrayType
NumArray : numArray
StrArray : strArray
CharArray : charArray
BoolArray : boolArray
pSame : Param SameType
FullPSame : Param SameType | FullPSame pSame
// setting return type
WillReturnNum2 : ReturnType Double
WillReturnChar2 : ReturnType Char
WillReturnBool2 : ReturnType bool
WillReturnStr2 : ReturnType String
WillReturnNumArr2 : ReturnType NumArray
WillReturnCharArr2 : ReturnType CharArray
WillReturnBoolArr2 : ReturnType BoolArray
WillReturnStrArr2 : ReturnType StrArray
WillReturnNum : WillReturnNum2 Punc
WillReturnChar : WillReturnChar2 Punc
WillReturnBool : WillReturnBool2 Punc
WillReturnStr : WillReturnStr2 Punc
WillReturnNumArr : WillReturnNumArr2 Punc
WillReturnCharArr : WillReturnCharArr2 Punc
WillReturnBoolArr : WillReturnBoolArr2 Punc
WillReturnStrArr : WillReturnStrArr2 Punc
// Does this have parameters?
ParaNumArrParam : ParaNumArr FullPSame
ParaCharArrParam : ParaCharArr FullPSame
ParaBoolArrParam : ParaBoolArr FullPSame
ParaStrArrParam : ParaStrArr FullPSame
ParaCharParam : ParaChar FullPSame
ParaBoolParam : ParaBool FullPSame
ParaStrParam : ParaStr FullPSame
ParaVoidParam : ParaVoid FullPSame
ParaNumParam : ParaNum FullPSame
// Full declaration line finally, needs to remain typed to match to a return statement later
FullParaDecNumArr : ParaNumArrParam WillReturnNumArr | ParaNumArr WillReturnNumArr 
FullParaDecCharArr : ParaCharArrParam WillReturnCharArr | ParaCharArr WillReturnCharArr 
FullParaDecBoolArr : ParaBoolArrParam WillReturnBoolArr | ParaBoolArr WillReturnBoolArr
FullParaDecStrArr : ParaStrArrParam WillReturnStrArr | ParaStrArr WillReturnStrArr
FullParaDecNum : ParaNumParam WillReturnNum | ParaNum WillReturnNum
FullParaDecChar : ParaCharParam WillReturnChar | ParaChar WillReturnChar
FullParaDecBool : ParaBoolParam WillReturnBool | ParaBool WillReturnBool
FullParaDecStr : ParaStrParam WillReturnStr | ParaStr WillReturnStr
// can't forget void types!
FullParaDecVoid : ParaVoidParam Punc | ParaVoidParam Punc
// General insides of a general paragraph
InnerNum : GeneralLine InnerNum | ReturningNum Punc
InnerChar : GeneralLine InnerChar | ReturningChar Punc
InnerStr : GeneralLine InnerStr | ReturningStr Punc
InnerBool : GeneralLine InnerBool | ReturningBool Punc
InnerNumArr : GeneralLine InnerNumArr | ReturningNumArr Punc
InnerCharArr : GeneralLine InnerCharArr | ReturningCharArr Punc
InnerStrArr : GeneralLine InnerStrArr | ReturningStrArr Punc
InnerBoolArr : GeneralLine InnerBoolArr | ReturningBoolArr Punc
// Now to tie the checked return statements 
// First check the endMainFunc token with the name after it
// Note that there is a second option here, the second option is only used when trying to find a broken line
EndNumPara : EndMainFunc ReturnsNum | EndMainFunc2 ReturnsNum
EndCharPara : EndMainFunc ReturnsChar | EndMainFunc2 ReturnsChar
EndBoolPara : EndMainFunc ReturnsBool | EndMainFunc2 ReturnsBool
EndStrPara : EndMainFunc ReturnsStr | EndMainFunc2 ReturnsStr
EndNumArrPara : EndMainFunc ReturnsNumArrayType | EndMainFunc2 ReturnsNumArrayType
EndCharArrPara : EndMainFunc ReturnsCharArrayType | EndMainFunc2 ReturnsCharArrayType 
EndBoolArrPara : EndMainFunc ReturnsBoolArrayType | EndMainFunc2 ReturnsBoolArrayType
EndStrArrPara : EndMainFunc ReturnsStrArrayType | EndMainFunc2 ReturnsStrArrayType
//The below segment is purely there for bug hunting purposes
EndNumPara2 : EndNumPara Punc
EndCharPara2 : EndCharPara Punc
EndBoolPara2 : EndBoolPara Punc 
EndStrPara2 : EndStrPara Punc
EndNumArrPara2 : EndNumArrPara Punc
EndCharArrPara2 : EndCharArrPara Punc
EndBoolArrPara2 : EndBoolArrPara Punc
EndStrArrPara2 : EndStrArrPara Punc
// And finally to close everything up
FullInnerNum : InnerNum EndNumPara
FullInnerChar : InnerChar EndCharPara
FullInnerBool : InnerBool EndBoolPara
FullInnerStr : InnerStr EndStrPara
FullInnerNumArr : InnerNumArr EndNumArrPara
FullInnerCharArr : InnerCharArr EndCharArrPara
FullInnerBoolArr : InnerBoolArr EndBoolArrPara
FullInnerStrArr : InnerStrArr EndStrArrPara
FullInnerVoid : GeneralLine FullInnerVoid | EndMainFunc ReturnsVoid
// The final call for all paragraph stuff down here
FullParagraph : FullParaDecNumArr FullInnerNumArr | FullParaDecCharArr FullInnerCharArr | FullParaDecBoolArr FullInnerBoolArr | FullParaDecStrArr FullInnerStrArr | FullParaDecNum FullInnerNum | FullParaDecChar FullInnerChar | FullParaDecBool FullInnerBool | FullParaDecStr FullInnerStr | FullParaDecVoid FullInnerVoid
FullParagraph2 : FullParagraph Punc
// Calling methods, but only independently
// Call : callPara
ALiteral : strLit | dubLit | charLit | true | false | null
AnyParams : Param ALiteral | Param Type | AnyParams ASP
ASP : And Type | And ALiteral
AnyReturns : returnsNumType | returnsCharType | returnsBoolType | returnsStrType | voidType | returnsNumArrayType | returnsCharArrayType | returnsBoolArrayType | returnsStrArrayType
CallingPara : Call AnyReturns | returnsNumType | returnsCharType | returnsBoolType | returnsStrType | voidType | returnsNumArrayType | returnsCharArrayType | returnsBoolArrayType | returnsStrArrayType
FullCall : CallingPara Punc | CallingPara APunc
APunc : AnyParams Punc