// Main branch
// @author Brandon Ehrmanntraut 
S : Opening A
A : F Closing
F : N F | Imports F | endfile | M F
M : Manestart X
X : Q ManeEnd
Q : GeneralLine Q | endMainfunc 
// A structure to store any general line
GeneralLine : n | decType Punc | asignNum FinishAsignNum | asignNum numTypePunc | asignNum VP | asignNum AllPrefix | FullIncrement Punc | FullAsignBool Punc | CompleteIfLine QQ | ToPrint Punc | BSP InnerCase | FullFor InnerFor
//
// opening the file
//
Opening : Begin PRP | ExtendBegin PRP
Begin : Beginfile Class
Beginfile : beginfile
Class : class
PRP : PR Punc
PR : Punc Report
Punc : punc
Report : report
N : n
ExtendBegin : Begin Interfaces
Interfaces : Interfacelisting Interface
Interfacelisting : interfacelisting
Interface : interface
//
// Imports
//
Imports : Bimport Punc
Bimport : Import Iname
Import : import
Iname : iName
//
// Closing
//
Closing : Punc FinalEnd
FinalEnd : Signee Punc
Signee : signee
//
// print statements - to be updated in milestone 3
//
Print : print
Tempstr : strLit | string | true | false | boolType | numType | charLit | charType | dubLit | Tempstr BackEnd | BeginOp Value | PV IV | NumType Inc | NumType Dec | returnsStrType
ToPrint : Print Tempstr
Fullprint : ToPrint Punc
//
// Mane Method
// The spelling of mane this way is dictated in the FiM++ wiki, not my own interpretation
Mane : mane
ManeMethod : manemethod
ManeDec : Mane ManeMethod
Manestart : ManeDec Punc
ManeEnd : ManeMethod Punc
//
// Variable declaration
//
Declaration : decType Punc
decType : VarDec FullType
VarDec : varDec
Asign : asign
FullType : varType Type | varType asignDec | varType asignBool
// varType is a collection of terminal symbols, I don't like it but it should work
// this is all of the variable names, asigned to their types
varType : strType | boolType | numType | charType | strArrayType | numArrayType | boolArrayType
asignDec : Asign matchedLit | asignDec BackEnd | PrefixAsignment IV
// Used for prefix things, made to make this happier
PrefixAsignment : Asign PV
//
asignBool : Asign BoolValue | Asign FullBoolStatement
Type : Bool | double | char | string | boolArray | strArray | numArray | returnsCharType | returnsNumType | returnsBoolType | returnsStrType
matchedLit : Bool true | Bool false | Bool null | Double Null | Double DubLit | Char Null | Char CharLit | String StrLit | String Null | returnsCharType | returnsNumType | returnsBoolType | returnsStrType
Null : null
Double : double
Char : char
String : string
bool : Bool
True : true
False : false
DubLit : dubLit
CharLit : charLit
StrLit : strLit
//
//
// Arithmatic operations
// 
//
// Infix operators
FullInfix : FullInfix BackEnd | BeginOp Value
BeginOp : Value Op
Value : numType | Double DubLit | NumType Inc | NumType Dec | dubLit | returnsNumType
Op : addInfix | subInfix | multInfix | divInfix
BackEnd : Op Value
//
// Prefix operators
//
AllPrefix : FullPrefix Punc | FullPrefix BP
FullPrefix : PV IV
PV : Prefix Value
Prefix : addPrefix | subPrefix | multPrefix | divPrefix
IV : Infix Value
Infix : addInfix2 | subInfix2 | multInfix2 | divInfix2
BP : BackEnd Punc | BackEnd BP
//
// Asigning a double to be a new value
//
Fan : asignNum FinishAsignNum | asignNum numTypePunc | asignNum VP | asignNum AllPrefix
asignNum : NumType Asign
NumType : numType | returnsNumType
FinishAsignNum : FullInfix Punc
numTypePunc : numType punc | FullIncrement Punc
VP : Value Punc
//
// Increment and Decrement
//
Inc : increment
Dec : decrement
FullIncrement : NumType Inc | NumType Dec
IncrimentOnly : FullIncrement Punc
// 
// Boolean statements
//
Nb : Not BoolValue | bool True | bool False | bool Null | boolType | Not FullNumBool | BeginNumBool Value | BeginNumBool FullInfix | BeginNumBool FullPrefix
BeginBoolStatement : Nb And | Nb Or | Nb Equals
FullBoolStatement : BeginBoolStatement Nb | FullBoolStatement BoolBack | FullBeginXOR Nb
BoolBack : And Nb | Or Nb
BoolValue : bool True | bool False | bool Null | boolType | bool FullNumBool | BeginNumBool Value | returnsBoolType
And : and
Or : or
Not : not
BeginXOR : xor Nb
xor : XOR
FullBeginXOR : BeginXOR Or
//
// asigning a boolean
//
BoolType : boolType
FullAsignBool : BoolType asignBool
AsignBoolLine : FullAsignBool Punc
//
// If statement
//
If : if
IfStatement : If BoolValue | If FullBoolStatement
CompleteIfLine : IfStatement Punc | IfStatement TP
QQ : EndConditional Punc | GeneralLine QQ | EP QQ
EndConditional : endConditional
Then : then
TP : Then Punc
Else : else
EP : Else Punc
// 
// Switch statements
//
Switch : switch
BeginSwitch : Switch NumType
BSP : BeginSwitch Punc
CasePunc : CaseClose Punc
CaseClose : caseClose
Case : case
caseStart : Case DubLit
FullCase : caseStart CasePunc | DefaultCase Punc
SwitchClose : switchClose
DefaultCase : defaultCase
InnerCase : SwitchClose Punc | GeneralLine InnerCase | FullCase InnerCase
//
// Comparisons
//
NumBools : equals | greaterThan | lessThan | notEqual | greaterThanOrEqual | lessThanOrEqual
BeginNumBool : Value NumBools | FullInfix NumBools | FullPrefix NumBools
FullNumBool : BeginNumBool Value | BeginNumBool FullInfix | BeginNumBool FullPrefix
//
// For loops
//
For : for
Setfor : subInfix2
SetMaxInFor : setMaxInFor
newVarType : Double NumType | Char CharType
forType : For newVarType
intFor : forType Setfor
NumSet : Value SetMaxInFor | CharLit SetMaxInFor | FullInfix SetMaxInFor | FullPrefix SetMaxInFor
numMax : NumSet Value | NumSet CharLit | NumSet FullInfix | NumSet FullPrefix
numFor : intFor numMax | FNumI NumArrayType | FBoolI BoolArrayType | FCharI CharArrayType | FStrI StrArrayType
FullFor : numFor Punc
CharType : charType
InnerFor : GeneralLine InnerFor | SwitchClose Punc
//
// for each loops
//
newNumVar : Double NumType
newCharVar : Char CharType
newBoolVar : Bool BoolType
newStrType : String strType
FNum : For newNumVar
FChar : For newCharVar
FBool : For newBoolVar
FStr : For newStrVar
FNumI : FNum ForEach
FCharI : FChar ForEach
FBoolI : FBool ForEach
FStrI : FStr ForEach
NumArrayType : numArrayType | returnsNumArrayType
CharArrayType : charArrayType | returnsCharArrayType
StrArrayType : strArrayType | returnsStrArrayType
BoolArrayType : boolArrayType | returnsBoolArrayType
ForEach : forEach
//
// methods
// Begining with all of the terminal symbols
Param : param
ReturnType : returnType
Para : para
Return : return
Call : callPara
ReturnsNum : returnsNumType
ReturnsChar : returnsCharType
ReturnsBool : returnsBoolType
ReturnsStr : returnsStrType
// return statements
