// Main branch
// @author Brandon Ehrmanntraut 
S : Opening A
A : F Closing
F : N F | Imports F | endfile | M F
M : Manestart X
X : Q ManeEnd
Q : N Q | Fullprint Q | Declaration Q | Fan Q | endMainfunc | IncrimentOnly Q | AsignBoolLine Q
//
// opening the file
//
Opening : Begin PRP | ExtendBegin PRP
Begin : Beginfile Class
Beginfile : beginfile
Class : class
PRP : PR Punc
PR : Punc Report
Punc : punc
Report : report
N : n
ExtendBegin : Begin Interfaces
Interfaces : Interfacelisting Interface
Interfacelisting : interfacelisting
Interface : interface
//
// Imports
//
Imports : Bimport Punc
Bimport : Import Iname
Import : import
Iname : iName
//
// Closing
//
Closing : Punc FinalEnd
FinalEnd : Signee Punc
Signee : signee
//
// print statements - to be updated in milestone 3
//
Print : print
Tempstr : strLit | string | true | false | boolType | numType | charLit | charType | dubLit | Tempstr BackEnd | BeginOp Value | PV IV | NumType Inc | NumType Dec
ToPrint : Print Tempstr
Fullprint : ToPrint Punc
//
// Mane Method
// The spelling of mane this way is dictated in the FiM++ wiki, not my own interpretation
Mane : mane
ManeMethod : manemethod
ManeDec : Mane ManeMethod
Manestart : ManeDec Punc
ManeEnd : ManeMethod Punc
//
// Variable declaration
//
Declaration : decType Punc
decType : VarDec FullType
VarDec : varDec
Asign : asign
FullType : varType Type | varType asignDec | varType asignBool
// varType is a collection of terminal symbols, I don't like it but it should work
// this is all of the variable names, asigned to their types
varType : strType | boolType | numType | charType | strArrayType | numArrayType | boolArrayType
asignDec : Asign matchedLit | asignDec BackEnd | PrefixAsignment IV 
// Used for prefix things, made to make this happier
PrefixAsignment : Asign PV
//
asignBool : Asign BoolValue | Asign FullBoolStatement
Type : Bool | double | char | string | boolArray | strArray | numArray
matchedLit : Bool true | Bool false | Bool null | Double Null | Double DubLit | Char Null | Char CharLit | String StrLit | String Null
Null : null
Double : double
Char : char
String : string
bool : Bool
True : true
False : false
DubLit : dubLit
CharLit : charLit
StrLit : strLit
//
//
// Arithmatic operations
// 
//
// Infix operators
FullInfix : FullInfix BackEnd | BeginOp Value
BeginOp : Value Op
Value : numType | Double DubLit | NumType Inc | NumType Dec
Op : addInfix | subInfix | multInfix | divInfix
BackEnd : Op Value
//
// Prefix operators
//
AllPrefix : FullPrefix Punc | FullPrefix BP
FullPrefix : PV IV
PV : Prefix Value
Prefix : addPrefix | subPrefix | multPrefix | divPrefix
IV : Infix Value
Infix : addInfix2 | subInfix2 | multInfix2 | divInfix2
BP : BackEnd Punc | BackEnd BP
//
// Asigning a double to be a new value
//
Fan : asignNum FinishAsignNum | asignNum numTypePunc | asignNum VP | asignNum AllPrefix
asignNum : NumType Asign
NumType : numType
FinishAsignNum : FullInfix Punc
numTypePunc : numType punc | FullIncrement Punc
VP : Value Punc
//
// Increment and Decrement
//
Inc : increment
Dec : decrement
FullIncrement : NumType Inc | NumType Dec
IncrimentOnly : FullIncrement Punc
// 
// Boolean statements
//
Nb : Not BoolValue | bool True | bool False | bool Null | boolType
BeginBoolStatement : Nb And | Nb Or
FullBoolStatement : BeginBoolStatement Nb | FullBoolStatement BoolBack | FullBeginXOR Nb
BoolBack : And Nb | Or Nb
BoolValue : bool True | bool False | bool Null | boolType
And : and
Or : or
Not : not
BeginXOR : xor Nb
xor : XOR
FullBeginXOR : BeginXOR Or
//
// asigning a boolean
//
BoolType : boolType
FullAsignBool : BoolType asignBool
AsignBoolLine : FullAsignBool Punc